#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define maxn 14000
struct node
{
   int l ,r , m, c ,f;
}tree[maxn * 4];
int L(int c)
{
  return 2*c;
}
int R(int c)
{
  return 2*c+1;
}
int hs[maxn];
void build(int c, int p , int v )
{
   tree[c].l = p;
   tree[c].r = v;
   tree[c].m = (p+v)/2;
   tree[c].c = 0 ;
   if(p == v)
        return;
   build(L(c),p,tree[c].m);
   build(R(c),tree[c].m+1,v);
}
void Pushdown(int c)
{
   if(tree[c].c!= -1)
    {
       tree[L(c)].c = tree[c].c;
       tree[R(c)].c = tree[c].c;
       tree[R(c)].f = tree[L(c)].f = 0 ;
       tree[c].c = -1; 
    }
    

}
void update(int c , int p , int v ,int value )
{
      if( p <= tree[c].l && v >= tree[c].m)
      {
         tree[c].c = value;
         tree[c].f = 0;
         return ;
      } 
      Pushdown(c);
      if(v <= tree[c].m) update(L(c),p,v,value);
      else if(p > tree[c].m) update(R(c),p,v,value);
      else {
          update(L(c),p,tree[c].m,value);
          update(R(c),tree[c].m + 1 ,v,value);
      }
}
void fan(int c ,int p , int v)
{
    if(p <= tree[c].l && v >= tree[c].m)
    {
       tree[c].f = tree[c].f^1;
      // sonme  Pushdown(c);
       return ;
    }
    Pushdown(c);
    if(v <= tree[c].m) fan(L(c),p,v);
    else if(p > tree[c].m) fan(R(c),p,v);
    else{
          fan(L(c),p,tree[c].m);
          fan(R(c),tree[c].m + 1 ,v);
    }
}

void geths()
int main()
{
    build(1,0,maxn);
    memset(hs,0,sizeof(hs));
    char op,l,r;
    int a,b;
    while(scanf("%c %c%d,%d%c",&op,&l,&a,&b,&r) != EOF)
    {
      getchar();

    }
  return 0 ;
}
